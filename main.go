// Lab: Abstraction with Go (Car Example)
// --------------------------------------
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Abstraction ‡∏ú‡πà‡∏≤‡∏ô Interface ‡∏ä‡∏∑‡πà‡∏≠ Car
// ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏ñ‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Sedan, Pickup, EV) ‡∏ó‡∏µ‡πà implements ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
//
// ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°:
//   go run main.go
//
// ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô: You üßë‚Äçüíª
package main

import "fmt"

// Car ‡∏Ñ‡∏∑‡∏≠ interface ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á "‡∏£‡∏ñ"
// ‡∏ó‡∏∏‡∏Å struct ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏ñ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏°‡∏ò‡∏≠‡∏î Drive() ‡πÅ‡∏•‡∏∞ Info()
type Car interface {
	Drive()       // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ
	Info() string // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ
}

// -------------------- Sedan --------------------
// Sedan ‡∏Ñ‡∏∑‡∏≠ struct ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á
type Sedan struct {
	Brand string
	Model string
	Color string
}

// implements ‡πÄ‡∏°‡∏ò‡∏≠‡∏î Drive() ‡∏Ç‡∏≠‡∏á Car
func (s Sedan) Drive() {
	fmt.Println("‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á ->", s.Brand, s.Model, "‡∏™‡∏µ:", s.Color)
}

// implements ‡πÄ‡∏°‡∏ò‡∏≠‡∏î Info() ‡∏Ç‡∏≠‡∏á Car
func (s Sedan) Info() string {
	return fmt.Sprintf("Sedan(%s %s, %s)", s.Brand, s.Model, s.Color)
}

// -------------------- Pickup --------------------
// Pickup ‡∏Ñ‡∏∑‡∏≠ struct ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô‡∏£‡∏ñ‡∏Å‡∏£‡∏∞‡∏ö‡∏∞
type Pickup struct {
	Brand   string
	Payload int  // ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (kg)
	FourWD  bool // ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô 4 ‡∏•‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

func (p Pickup) Drive() {
	mode := "2WD"
	if p.FourWD {
		mode = "4WD"
	}
	fmt.Println("‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏Å‡∏£‡∏∞‡∏ö‡∏∞ ->", p.Brand, "‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡πÑ‡∏î‡πâ:", p.Payload, "kg", "| ‡πÇ‡∏´‡∏°‡∏î:", mode)
}

func (p Pickup) Info() string {
	return fmt.Sprintf("Pickup(%s, %dkg, FourWD:%t)", p.Brand, p.Payload, p.FourWD)
}

// -------------------- EV --------------------
// EV ‡∏Ñ‡∏∑‡∏≠ struct ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
type EV struct {
	Brand      string
	Battery    int  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (kWh)
	RangeKM    int  // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≤‡∏£‡πå‡∏à (km)
	FastCharge bool // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

func (e EV) Drive() {
	fc := "‡∏ä‡∏≤‡∏£‡πå‡∏à‡∏õ‡∏Å‡∏ï‡∏¥"
	if e.FastCharge {
		fc = "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏≤‡∏£‡πå‡∏à‡πÄ‡∏£‡πá‡∏ß"
	}
	fmt.Println("‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ ->", e.Brand, "| ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà:", e.Battery, "kWh | ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á:", e.RangeKM, "km |", fc)
}

func (e EV) Info() string {
	return fmt.Sprintf("EV(%s, %dkWh, %dkm, FastCharge:%t)", e.Brand, e.Battery, e.RangeKM, e.FastCharge)
}

// -------------------- main --------------------
func main() {
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
	sedan := Sedan{Brand: "Toyota", Model: "Camry", Color: "‡∏î‡∏≥"}
	pickup := Pickup{Brand: "Isuzu", Payload: 1000, FourWD: true}
	ev := EV{Brand: "Tesla", Battery: 75, RangeKM: 500, FastCharge: true}

	// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô abstraction ‡∏ú‡πà‡∏≤‡∏ô interface Car
	cars := []Car{sedan, pickup, ev}

	// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡πÉ‡∏î
	for _, car := range cars {
		fmt.Println(car.Info())
		car.Drive()
		fmt.Println("---")
	}
}
